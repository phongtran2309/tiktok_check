const puppeteer = require("puppeteer");
const fs = require("fs");
const path = require("path");
const axios = require("axios");

// T·∫°o danh s√°ch l∆∞u URL ƒë√£ t·∫£i
const downloadFolder = path.join(__dirname, "images");
const imgTxtPath = path.join(__dirname, "img.txt"); // ƒê∆∞·ªùng d·∫´n t·ªõi file img.txt
if (!fs.existsSync(downloadFolder)) fs.mkdirSync(downloadFolder);

// ƒê·ªçc c√°c URL ·∫£nh ƒë√£ l∆∞u trong img.txt
function readDownloadedImages() {
  if (fs.existsSync(imgTxtPath)) {
    const data = fs.readFileSync(imgTxtPath, "utf-8");
    return new Set(data.split("\n").filter(Boolean));
  }
  return new Set();
}

// L∆∞u URL ·∫£nh v√†o img.txt
function saveDownloadedImage(url) {
  fs.appendFileSync(imgTxtPath, url + "\n");
}

// H√†m t·∫£i ·∫£nh
async function downloadImage(url) {
  const downloadedImages = readDownloadedImages();

  if (downloadedImages.has(url)) {
    console.log(`‚ùå ·∫¢nh ${url} ƒë√£ t·∫£i r·ªìi, b·ªè qua.`);
    return; // B·ªè qua n·∫øu ·∫£nh ƒë√£ t·∫£i
  }

  try {
    // L·∫•y ph·∫ßn cu·ªëi c√πng c·ªßa URL l√†m t√™n file
    const fileName = path.basename(url);
    const imagePath = path.join(downloadFolder, fileName);

    const response = await axios.get(url, { responseType: "arraybuffer" });
    fs.writeFileSync(imagePath, response.data);
    
    saveDownloadedImage(url); // L∆∞u URL v√†o img.txt
    console.log(`‚úÖ ƒê√£ t·∫£i ·∫£nh: ${imagePath}`);
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫£i ·∫£nh ${url}: `, error.message);
  }
}

// H√†m l·∫•y URL ·∫£nh tr√™n trang
async function getImageUrls(page) {
  return await page.evaluate(() => {
    return Array.from(document.querySelectorAll("img"))
      .map(img => img.src) // Ch·ªâ l·∫•y gi√° tr·ªã t·ª´ `src`
      .filter(url => url && url.startsWith("https")) // L·ªçc b·ªè URL kh√¥ng h·ª£p l·ªá
      .map(url => url.replace(/\/\d+x\//, "/736x/")); // ƒê·ªïi t·∫•t c·∫£ ƒë·ªô ph√¢n gi·∫£i v·ªÅ 736x
  });
}


// H√†m t·ª± ƒë·ªông cu·ªôn + t·∫£i ·∫£nh theo t·ª´ng l·∫ßn cu·ªôn
async function autoScroll(page, scrollCount = 2500) {
  let totalImages = 0;

  for (let i = 0; i < scrollCount; i++) {
    console.log(`üîÑ Cu·ªôn l·∫ßn ${i + 1}/${scrollCount}...`);

    // L·∫•y URL ·∫£nh hi·ªán t·∫°i tr√™n trang
    const imageUrls = await getImageUrls(page);
    // T·∫£i t·ª´ng ·∫£nh
    for (const url of imageUrls) {
      await downloadImage(url, totalImages);
      totalImages++;
    }

    // Cu·ªôn xu·ªëng
    await page.evaluate(() => window.scrollBy(0, window.innerHeight));
    await new Promise(resolve => setTimeout(resolve, 1000)); // ƒê·ª£i ·∫£nh t·∫£i xong
  }
}

(async () => {
  const browser = await puppeteer.launch({
    headless: true,
    args: [
      "--disable-gpu",
      "--disable-software-rasterizer",
      "--disable-dev-shm-usage",
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--window-size=1920,1080"
    ]
  });

  const page = await browser.newPage();

  // Fake User-Agent ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
  await page.setUserAgent(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
  );

  const url = "https://www.pinterest.com/search/pins/?q=asia%20girl&rs=typed";
  await page.goto(url, { waitUntil: "load", timeout: 0 });

  // Ch·∫°y cu·ªôn v√† t·∫£i ·∫£nh
  await autoScroll(page, 50);

  await browser.close();
})();
